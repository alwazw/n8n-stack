version: '3.8'

volumes:
  db_storage:
  n8n_storage:
  redis_storage:
  grafana_data:
  nginx_certs:
  nginx_conf:
  traefik_certs:
  pgadmin_data:
  supabase_pgdata:
  supabase_storage:
  prometheus_data:
  loki_data:
  vault_data:
  vault_logs:
  keycloak_data:
  nifi_data:
  nifi_logs:
  nifi_conf:
  minio_data:
  kong_data:
  portainer_data:
  duplicati_data:
  metabase_data:
  node_red_data:

networks:
  n8n-network:
    driver: bridge

x-shared: &shared
  restart: always
  image: docker.n8n.io/n8nio/n8n
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - EXECUTIONS_MODE=queue
    - QUEUE_BULL_REDIS_HOST=redis
    - QUEUE_HEALTH_CHECK_ACTIVE=true
    - N8N_ENCRYPTION_KEY=${ENCRYPTION_KEY}
    - N8N_SECURE_COOKIE=true
    - N8N_HOST=n8n-stack
    - N8N_PROTOCOL=https
    - NODE_TLS_REJECT_UNAUTHORIZED=0
    - N8N_TRUSTED_PROXIES=nginx
  links:
    - postgres
    - redis
    - grafana
  volumes:
    - n8n_storage:/home/node/.n8n
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - n8n-network

services:

  #Postgres
  postgres:
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - db_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-network

  #pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-admin@n8n-stack.local}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-${POSTGRES_PASSWORD}}
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - n8n-network

  #Redis
  redis:
    image: redis:6-alpine
    restart: always
    ports:      
      - "${REDIS_PORT:-6379}:6379"
    depends_on:
      - postgres
    volumes:
      - redis_storage:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10
    env_file:
      - .env
    networks:
      - n8n-network

  #Adminer
  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - n8n-network

  #Grafana
  grafana:
    image: grafana/grafana-oss:latest
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/n8n-dashboard.json
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards
    networks:
      - n8n-network

  #Nginx
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/certs:/etc/nginx/certs
      - nginx_conf:/etc/nginx
    depends_on:
      - n8n
      - supabase-studio
      - prometheus
      - grafana
      - portainer
      - metabase
      - node-red
      - minio
      - keycloak
    networks:
      - n8n-network

  #Traefik
  traefik:
    image: traefik:v2.10
    restart: always
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "8081:8080" # Dashboard
      - "81:80"     # HTTP
      - "444:443"   # HTTPS
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik
      - traefik_certs:/etc/traefik/certs
    networks:
      - n8n-network
    labels:
      - "traefik.enable=true"

  n8n:
    <<: *shared
    ports:
      - 5678:5678
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n-stack`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"

  n8n-worker:
    <<: *shared
    command: worker
    depends_on:
      - n8n
    networks:
      - n8n-network

  # Supabase Services
  supabase-db:
    image: supabase/postgres:15.1.0.117
    restart: always
    environment:
      - POSTGRES_USER=${SUPABASE_DB_USER:-${POSTGRES_USER}}
      - POSTGRES_PASSWORD=${SUPABASE_DB_PASSWORD:-${POSTGRES_PASSWORD}}
      - POSTGRES_DB=${SUPABASE_DB:-supabase}
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - supabase_pgdata:/var/lib/postgresql/data
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SUPABASE_DB_USER:-${POSTGRES_USER}} -d ${SUPABASE_DB:-supabase}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-network
    ports:
      - "5432:5432"

  supabase-auth:
    image: supabase/gotrue:v2.64.1
    restart: always
    depends_on:
      supabase-db:
        condition: service_healthy
    environment:
      - GOTRUE_API_HOST=0.0.0.0
      - GOTRUE_API_PORT=9999
      - API_EXTERNAL_URL=https://n8n-stack
      - GOTRUE_DB_DRIVER=postgres
      - GOTRUE_DB_HOST=supabase-db
      - GOTRUE_DB_PORT=5432
      - GOTRUE_DB_USER=${SUPABASE_DB_USER:-${POSTGRES_USER}}
      - GOTRUE_DB_PASSWORD=${SUPABASE_DB_PASSWORD:-${POSTGRES_PASSWORD}}
      - GOTRUE_DB_DATABASE_URL=postgres://${SUPABASE_DB_USER:-${POSTGRES_USER}}:${SUPABASE_DB_PASSWORD:-${POSTGRES_PASSWORD}}@supabase-db:5432/${SUPABASE_DB:-supabase}?sslmode=disable
      - GOTRUE_SITE_URL=https://n8n-stack
      - GOTRUE_JWT_SECRET=${SUPABASE_JWT_SECRET:-${ENCRYPTION_KEY}}
      - GOTRUE_JWT_EXP=3600
      - GOTRUE_JWT_DEFAULT_GROUP_NAME=authenticated
      - GOTRUE_DISABLE_SIGNUP=false
      - GOTRUE_SMTP_ADMIN_EMAIL=${SUPABASE_ADMIN_EMAIL:-admin@n8n-stack.local}
      - GOTRUE_MAILER_AUTOCONFIRM=true
    networks:
      - n8n-network
    ports:
      - "9999:9999"

  supabase-rest:
    image: postgrest/postgrest:v10.1.2
    restart: always
    depends_on:
      - supabase-db
      - supabase-auth
    environment:
      - PGRST_DB_URI=postgres://${SUPABASE_DB_USER:-${POSTGRES_USER}}:${SUPABASE_DB_PASSWORD:-${POSTGRES_PASSWORD}}@supabase-db:5432/${SUPABASE_DB:-supabase}
      - PGRST_DB_SCHEMA=public,storage
      - PGRST_DB_ANON_ROLE=anon
      - PGRST_JWT_SECRET=${SUPABASE_JWT_SECRET:-${ENCRYPTION_KEY}}
      - PGRST_DB_USE_LEGACY_GUCS=false
    networks:
      - n8n-network
    ports:
      - "3001:3000"

  supabase-storage:
    image: supabase/storage-api:v0.40.4
    restart: always
    depends_on:
      - supabase-db
      - supabase-rest
    environment:
      - ANON_KEY=${SUPABASE_ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0}
      - SERVICE_KEY=${SUPABASE_SERVICE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU}
      - POSTGREST_URL=http://supabase-rest:3000
      - PGRST_JWT_SECRET=${SUPABASE_JWT_SECRET:-${ENCRYPTION_KEY}}
      - DATABASE_URL=postgres://${SUPABASE_DB_USER:-${POSTGRES_USER}}:${SUPABASE_DB_PASSWORD:-${POSTGRES_PASSWORD}}@supabase-db:5432/${SUPABASE_DB:-supabase}
      - TENANT_ID=stub
      - REGION=stub
      - GLOBAL_S3_BUCKET=stub
      - ENABLE_IMAGE_TRANSFORMATION=true
      - FILE_SIZE_LIMIT=52428800
      - FILE_STORAGE_BACKEND=file
      - FILE_STORAGE_UPLOAD_TIMEOUT=30000
      - STORAGE_BACKEND=file
      - FILE_STORAGE_BACKEND_PATH=/var/lib/storage
    volumes:
      - supabase_storage:/var/lib/storage
    networks:
      - n8n-network
    ports:
      - "5000:5000"

  supabase-meta:
    image: supabase/postgres-meta:v0.66.0
    restart: always
    depends_on:
      - supabase-db
    environment:
      - PG_META_PORT=8080
      - PG_META_DB_HOST=supabase-db
      - PG_META_DB_PORT=5432
      - PG_META_DB_NAME=${SUPABASE_DB:-supabase}
      - PG_META_DB_USER=${SUPABASE_DB_USER:-${POSTGRES_USER}}
      - PG_META_DB_PASSWORD=${SUPABASE_DB_PASSWORD:-${POSTGRES_PASSWORD}}
    networks:
      - n8n-network
    ports:
      - "8082:8080"

  supabase-studio:
    image: supabase/studio:20230327-c67d0ee
    restart: always
    depends_on:
      - supabase-db
      - supabase-auth
      - supabase-rest
      - supabase-storage
      - supabase-meta
    environment:
      - STUDIO_PG_META_URL=http://supabase-meta:8080
      - SUPABASE_URL=http://n8n-stack
      - SUPABASE_REST_URL=http://supabase-rest:3000
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU}
    networks:
      - n8n-network
    ports:
      - "3333:3000"

  # Monitoring & Observability
  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - n8n-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`n8n-stack`) && PathPrefix(`/prometheus`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  alertmanager:
    image: prom/alertmanager:latest
    restart: always
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - n8n-network
    depends_on:
      - prometheus

  loki:
    image: grafana/loki:latest
    restart: always
    volumes:
      - ./loki:/etc/loki
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yml
    ports:
      - "3100:3100"
    networks:
      - n8n-network

  promtail:
    image: grafana/promtail:latest
    restart: always
    volumes:
      - ./promtail:/etc/promtail
      - /var/log:/var/log
    command: -config.file=/etc/promtail/promtail-config.yml
    depends_on:
      - loki
    networks:
      - n8n-network

  # Security & Secrets Management
  vault:
    image: hashicorp/vault:latest
    restart: always
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_TOKEN:-${ENCRYPTION_KEY}}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_ADDR=http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
      - ./vault/config:/vault/config
    ports:
      - "8200:8200"
    networks:
      - n8n-network
    command: server -dev

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    restart: always
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN_USER:-${POSTGRES_USER}}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-${POSTGRES_PASSWORD}}
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - KC_DB_USERNAME=${POSTGRES_USER}
      - KC_DB_PASSWORD=${POSTGRES_PASSWORD}
      - KC_HOSTNAME=n8n-stack
      - KC_PROXY=edge
    volumes:
      - keycloak_data:/opt/keycloak/data
    ports:
      - "8090:8080"
    depends_on:
      - postgres
    networks:
      - n8n-network
    command: start-dev

  # Data Processing & Integration
  nifi:
    image: apache/nifi:latest
    restart: always
    environment:
      - NIFI_WEB_HTTP_PORT=8070
      - SINGLE_USER_CREDENTIALS_USERNAME=${NIFI_ADMIN_USER:-${POSTGRES_USER}}
      - SINGLE_USER_CREDENTIALS_PASSWORD=${NIFI_ADMIN_PASSWORD:-${POSTGRES_PASSWORD}}
    volumes:
      - nifi_data:/opt/nifi/nifi-current/database_repository
      - nifi_logs:/opt/nifi/nifi-current/logs
      - nifi_conf:/opt/nifi/nifi-current/conf
      - ./nifi/flow:/opt/nifi/nifi-current/flow
    ports:
      - "8070:8070"
    networks:
      - n8n-network

  minio:
    image: minio/minio:latest
    restart: always
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-${POSTGRES_USER}}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-${POSTGRES_PASSWORD}}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - n8n-network
    command: server /data --console-address ":9001"

  # Development & API Management
  kong:
    image: kong:latest
    restart: always
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
      - KONG_PG_USER=${POSTGRES_USER}
      - KONG_PG_PASSWORD=${POSTGRES_PASSWORD}
      - KONG_PG_DATABASE=${POSTGRES_DB}
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
    volumes:
      - kong_data:/var/lib/kong
    depends_on:
      - postgres
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    networks:
      - n8n-network

  portainer:
    image: portainer/portainer-ce:latest
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9443:9443"
      - "8999:9000"
    networks:
      - n8n-network

  # Backup & Disaster Recovery
  duplicati:
    image: duplicati/duplicati:latest
    restart: always
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
    volumes:
      - duplicati_data:/data
      - ./backups:/backups
      - ./source:/source
    ports:
      - "8200:8200"
    networks:
      - n8n-network

  # Frontend & Visualization
  metabase:
    image: metabase/metabase:latest
    restart: always
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=${POSTGRES_DB}
      - MB_DB_PORT=5432
      - MB_DB_USER=${POSTGRES_USER}
      - MB_DB_PASS=${POSTGRES_PASSWORD}
      - MB_DB_HOST=postgres
      - JAVA_TIMEZONE=UTC
    volumes:
      - metabase_data:/metabase-data
    ports:
      - "3030:3000"
    depends_on:
      - postgres
    networks:
      - n8n-network

  node-red:
    image: nodered/node-red:latest
    restart: always
    environment:
      - NODE_RED_CREDENTIAL_SECRET=${NODE_RED_CREDENTIAL_SECRET:-${ENCRYPTION_KEY}}
      - NODE_RED_ENABLE_PROJECTS=true
    volumes:
      - node_red_data:/data
    ports:
      - "1880:1880"
    networks:
      - n8n-network
