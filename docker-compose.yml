version: '3.8'

volumes:
  db_storage:
  n8n_storage:
  redis_storage:
  grafana_data:
  nginx_certs:
  nginx_conf:
  traefik_certs:

networks:
  n8n-network:
    driver: bridge

x-shared: &shared
  restart: always
  image: docker.n8n.io/n8nio/n8n
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - EXECUTIONS_MODE=queue
    - QUEUE_BULL_REDIS_HOST=redis
    - QUEUE_HEALTH_CHECK_ACTIVE=true
    - N8N_ENCRYPTION_KEY=${ENCRYPTION_KEY}
    - N8N_SECURE_COOKIE=true
    - N8N_HOST=n8n-stack
    - N8N_PROTOCOL=https
    - NODE_TLS_REJECT_UNAUTHORIZED=0
    - N8N_TRUSTED_PROXIES=nginx
  links:
    - postgres
    - redis
    - grafana
  volumes:
    - n8n_storage:/home/node/.n8n
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - n8n-network

services:

  #Postgres
  postgres:
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - db_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-network

  #Redis
  redis:
    image: redis:6-alpine
    restart: always
    ports:      
      - "${REDIS_PORT:-6379}:6379"
    depends_on:
      - postgres
    volumes:
      - redis_storage:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10
    env_file:
      - .env
    networks:
      - n8n-network

  #Adminer
  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - n8n-network

  #Grafana
  grafana:
    image: grafana/grafana-oss:latest
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    env_file:
      - .env
    networks:
      - n8n-network

  #Nginx
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/certs:/etc/nginx/certs
      - nginx_conf:/etc/nginx
    depends_on:
      - n8n
    networks:
      - n8n-network

  #Traefik
  traefik:
    image: traefik:v2.10
    restart: always
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "8081:8080" # Dashboard
      - "81:80"     # HTTP
      - "444:443"   # HTTPS
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik
      - traefik_certs:/etc/traefik/certs
    networks:
      - n8n-network
    labels:
      - "traefik.enable=true"

  n8n:
    <<: *shared
    ports:
      - 5678:5678
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n-stack`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"

  n8n-worker:
    <<: *shared
    command: worker
    depends_on:
      - n8n
    networks:
      - n8n-network
